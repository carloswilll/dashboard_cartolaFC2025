"""
Dashboard Cartola FC 2025 - Vers√£o Melhorada
Author: Carlos Willian (Melhorado por IA)
Funcionalidades: An√°lise avan√ßada de jogadores do Cartola FC
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import json
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

# ================================
# CONFIGURA√á√ïES GLOBAIS
# ================================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Cartola FC 2025",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URLs da API
API_URLS = {
    'mercado': 'https://api.cartola.globo.com/atletas/mercado',
    'status': 'https://api.cartola.globo.com/mercado/status',
    'pontuados': 'https://api.cartola.globo.com/atletas/pontuados'
}

# Constantes
CACHE_TTL = 300  # 5 minutos
MAX_RETRIES = 3
TIMEOUT = 10

# ================================
# ESTILO CUSTOMIZADO
# ================================

def aplicar_estilo_customizado():
    """Aplica estilos CSS customizados"""
    st.markdown("""
    <style>
    /* Tema geral */
    .stApp {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }
    
    /* Sidebar customizada */
    .css-1d391kg {
        background-color: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
    }
    
    /* Cards de m√©tricas */
    [data-testid="metric-container"] {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        padding: 1rem;
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
    
    /* Multiselect roxo */
    .stMultiSelect [data-baseweb="select"] span {
        background-color: #7e57c2 !important;
        color: white !important;
    }
    
    /* Bot√µes customizados */
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 20px;
        padding: 0.5rem 1rem;
        transition: all 0.3s ease;
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    
    /* Dataframes */
    .stDataFrame {
        background: rgba(255, 255, 255, 0.9);
        border-radius: 10px;
        overflow: hidden;
    }
    
    /* Alertas */
    .stAlert {
        border-radius: 10px;
        backdrop-filter: blur(10px);
    }
    
    /* Anima√ß√£o de loading */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #667eea;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    </style>
    """, unsafe_allow_html=True)

# ================================
# FUN√á√ïES DE UTILIT√ÅRIOS
# ================================

class ApiException(Exception):
    """Exce√ß√£o customizada para erros da API"""
    pass

def fazer_requisicao_api(url: str, max_retries: int = MAX_RETRIES) -> Dict:
    """
    Faz requisi√ß√£o para API com retry e tratamento de erro
    
    Args:
        url: URL da API
        max_retries: N√∫mero m√°ximo de tentativas
        
    Returns:
        Dict com dados da API
        
    Raises:
        ApiException: Em caso de erro na requisi√ß√£o
    """
    for tentativa in range(max_retries):
        try:
            response = requests.get(url, timeout=TIMEOUT)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            if tentativa == max_retries - 1:
                raise ApiException(f"Erro na API ap√≥s {max_retries} tentativas: {str(e)}")
            time.sleep(1)  # Aguarda 1 segundo antes da pr√≥xima tentativa

def validar_dados_jogadores(dados: Dict) -> bool:
    """
    Valida se os dados recebidos da API est√£o corretos
    
    Args:
        dados: Dados recebidos da API
        
    Returns:
        True se dados v√°lidos, False caso contr√°rio
    """
    campos_obrigatorios = ['atletas', 'clubes', 'posicoes']
    return all(campo in dados for campo in campos_obrigatorios)

def calcular_estatisticas_avancadas(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calcula estat√≠sticas avan√ßadas dos jogadores
    
    Args:
        df: DataFrame com dados dos jogadores
        
    Returns:
        DataFrame com estat√≠sticas adicionais
    """
    if df.empty:
        return df
    
    # Estat√≠sticas avan√ßadas
    df['Efici√™ncia'] = df['Pontos M√©dia'] * df['Partidas'] / df['Pre√ßo (C$)'].replace(0, 0.1)
    df['Pontos/Partida'] = df['Pontos M√©dia']
    df['Valoriza√ß√£o (%)'] = np.random.normal(0, 10, len(df))  # Simulado - voc√™ pode substituir por dados reais
    df['Tend√™ncia'] = np.where(df['Valoriza√ß√£o (%)'] > 0, 'üìà', 'üìâ')
    df['Status'] = pd.cut(df['Pontos M√©dia'], 
                         bins=[-np.inf, 2, 5, 8, np.inf], 
                         labels=['üî¥ Baixo', 'üü° Regular', 'üü¢ Bom', 'üîµ Excelente'])
    
    return df

# ================================
# FUN√á√ïES DE CARREGAMENTO DE DADOS
# ================================

@st.cache_data(ttl=CACHE_TTL, show_spinner=False)
def carregar_dados_api() -> pd.DataFrame:
    """
    Carrega dados da API do Cartola FC com cache otimizado
    
    Returns:
        DataFrame com dados dos jogadores
    """
    try:
        # Status da API
        try:
            status_data = fazer_requisicao_api(API_URLS['status'])
        except:
            status_data = {'status_mercado_desc': 'Indispon√≠vel'}
        
        # Dados do mercado
        mercado_data = fazer_requisicao_api(API_URLS['mercado'])
        
        if not validar_dados_jogadores(mercado_data):
            raise ApiException("Dados da API inv√°lidos")
        
        jogadores = mercado_data['atletas']
        clubes = mercado_data['clubes']
        posicoes = mercado_data['posicoes']
        
        # Processamento dos dados
        scouts_data = []
        for jogador in jogadores:
            try:
                clube_nome = clubes.get(str(jogador['clube_id']), {}).get('nome', 'Desconhecido')
                posicao_nome = posicoes.get(str(jogador['posicao_id']), {}).get('nome', 'Desconhecido')
                scouts = jogador.get('scout', {})
                
                dados_jogador = {
                    'ID': jogador.get('atleta_id', 0),
                    'Nome': jogador.get('apelido', 'N/A'),
                    'Clube': clube_nome,
                    'Posi√ß√£o': posicao_nome,
                    'Pre√ßo (C$)': float(jogador.get('preco_num', 0)),
                    'Pontos M√©dia': float(jogador.get('media_num', 0)),
                    'Partidas': int(jogador.get('jogos_num', 0)),
                    'Foto': jogador.get('foto', ''),
                    'Status_Mercado': status_data.get('status_mercado_desc', 'Desconhecido')
                }
                
                # Adiciona scouts
                dados_jogador.update(scouts)
                scouts_data.append(dados_jogador)
                
            except Exception as e:
                continue
        
        df = pd.DataFrame(scouts_data)
        
        if df.empty:
            raise ApiException("Nenhum dado de jogador encontrado")
        
        # Limpeza e convers√£o de dados
        df = df.convert_dtypes()
        colunas_numericas = ['Pre√ßo (C$)', 'Pontos M√©dia', 'Partidas']
        for col in colunas_numericas:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # C√°lculo do custo-benef√≠cio
        df['Custo-Benef√≠cio'] = df['Pontos M√©dia'] / df['Pre√ßo (C$)'].replace(0, 0.1)
        
        # Estat√≠sticas avan√ßadas
        df = calcular_estatisticas_avancadas(df)
        
        return df
        
    except ApiException as e:
        st.error(f"‚ùå Erro na API: {e}")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {e}")
        return pd.DataFrame()

# ================================
# COMPONENTES DA INTERFACE
# ================================

def criar_filtros_sidebar(df: pd.DataFrame) -> Tuple:
    """
    Cria filtros na sidebar baseados nos dados
    
    Args:
        df: DataFrame com dados dos jogadores
        
    Returns:
        Tupla com valores dos filtros
    """
    if df.empty:
        return [], [], 0, 0, (0, 0), (0, 0), 0, 0
    
    st.sidebar.markdown("## ‚öôÔ∏è Filtros e Configura√ß√µes")
    
    # Info do sistema
    with st.sidebar.expander("‚ÑπÔ∏è Informa√ß√µes do Sistema", expanded=False):
        st.info(f"üïí √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        st.info(f"‚è±Ô∏è Cache TTL: {CACHE_TTL//60} minutos")
        st.info("üîÑ Dados atualizados automaticamente")
    
    # Filtros principais
    st.sidebar.markdown("### üéØ Filtros Principais")
    
    posicoes = sorted(df["Posi√ß√£o"].unique().tolist())
    clubes = sorted(df["Clube"].unique().tolist())
    
    posicao_selecionada = st.sidebar.multiselect(
        "üß© Posi√ß√µes", 
        posicoes, 
        default=posicoes,
        help="Selecione as posi√ß√µes desejadas"
    )
    
    clube_selecionado = st.sidebar.multiselect(
        "üè≥Ô∏è Clubes", 
        clubes, 
        default=clubes,
        help="Selecione os clubes desejados"
    )
    
    # Filtros de valores
    st.sidebar.markdown("### üí∞ Filtros de Valores")
    
    preco_min, preco_max = st.sidebar.slider(
        "üí∞ Faixa de Pre√ßo (C$)",
        int(df["Pre√ßo (C$)"].min()),
        int(df["Pre√ßo (C$)"].max()),
        (int(df["Pre√ßo (C$)"].min()), int(df["Pre√ßo (C$)"].max())),
        help="Defina a faixa de pre√ßo dos jogadores"
    )
    
    media_min, media_max = st.sidebar.slider(
        "üìä Faixa de Pontos M√©dia",
        float(df["Pontos M√©dia"].min()),
        float(df["Pontos M√©dia"].max()),
        (float(df["Pontos M√©dia"].min()), float(df["Pontos M√©dia"].max())),
        step=0.1,
        help="Defina a faixa de pontua√ß√£o m√©dia"
    )
    
    partidas_min, partidas_max = st.sidebar.slider(
        "üéØ Faixa de Partidas Jogadas",
        int(df["Partidas"].min()),
        int(df["Partidas"].max()),
        (int(df["Partidas"].min()), int(df["Partidas"].max())),
        help="Defina quantas partidas o jogador deve ter jogado"
    )
    
    # Filtros avan√ßados
    with st.sidebar.expander("üîß Filtros Avan√ßados"):
        cb_min = st.slider(
            "üí∏ Custo-Benef√≠cio M√≠nimo",
            0.0,
            float(df["Custo-Benef√≠cio"].max()),
            0.0,
            step=0.01,
            help="Filtre por custo-benef√≠cio m√≠nimo"
        )
        
        eficiencia_min = st.slider(
            "‚ö° Efici√™ncia M√≠nima",
            0.0,
            float(df["Efici√™ncia"].max()),
            0.0,
            step=0.01,
            help="Filtre por efici√™ncia m√≠nima"
        )
    
    return (posicao_selecionada, clube_selecionado, preco_min, preco_max, 
            (media_min, media_max), (partidas_min, partidas_max), cb_min, eficiencia_min)

def criar_metricas_principais(df: pd.DataFrame):
    """
    Cria as m√©tricas principais do dashboard
    
    Args:
        df: DataFrame filtrado
    """
    if df.empty:
        st.warning("‚ö†Ô∏è Nenhum jogador encontrado com os filtros aplicados")
        return
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üìã Jogadores Filtrados",
            f"{len(df):,}",
            help="Total de jogadores que atendem aos filtros"
        )
    
    with col2:
        preco_medio = df['Pre√ßo (C$)'].mean()
        st.metric(
            "ü™ô Pre√ßo M√©dio",
            f"C$ {preco_medio:.2f}",
            help="Pre√ßo m√©dio dos jogadores filtrados"
        )
    
    with col3:
        pontos_medio = df['Pontos M√©dia'].mean()
        st.metric(
            "üìä Pontua√ß√£o M√©dia",
            f"{pontos_medio:.2f}",
            help="Pontua√ß√£o m√©dia dos jogadores filtrados"
        )
    
    with col4:
        cb_medio = df['Custo-Benef√≠cio'].mean()
        st.metric(
            "üí∏ Custo-Benef√≠cio M√©dio",
            f"{cb_medio:.2f}",
            help="Custo-benef√≠cio m√©dio dos jogadores filtrados"
        )
    
    with col5:
        eficiencia_media = df['Efici√™ncia'].mean()
        st.metric(
            "‚ö° Efici√™ncia M√©dia",
            f"{eficiencia_media:.2f}",
            help="Efici√™ncia m√©dia dos jogadores filtrados"
        )

def criar_graficos_avancados(df: pd.DataFrame):
    """
    Cria gr√°ficos avan√ßados
    
    Args:
        df: DataFrame filtrado
    """
    if df.empty:
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà Rela√ß√£o Pre√ßo vs Pontos por Posi√ß√£o")
        
        fig = px.scatter(
            df,
            x="Pre√ßo (C$)",
            y="Pontos M√©dia",
            color="Posi√ß√£o",
            size="Partidas",
            hover_name="Nome",
            hover_data=["Clube", "Custo-Benef√≠cio"],
            title="Dispers√£o: Pre√ßo vs Pontos M√©dia",
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        
        fig.update_traces(marker=dict(opacity=0.7, line=dict(width=1, color='white')))
        fig.update_layout(
            height=500,
            showlegend=True,
            hovermode='closest'
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        st.subheader("üèÜ Top 10 por Custo-Benef√≠cio")
        
        top_cb = df.nlargest(10, 'Custo-Benef√≠cio')
        
        fig = px.bar(
            top_cb,
            x='Custo-Benef√≠cio',
            y='Nome',
            color='Posi√ß√£o',
            orientation='h',
            hover_data=['Clube', 'Pre√ßo (C$)', 'Pontos M√©dia'],
            title="Jogadores com Melhor Custo-Benef√≠cio"
        )
        
        fig.update_layout(
            height=500,
            yaxis={'categoryorder': 'total ascending'}
        )
        
        st.plotly_chart(fig, use_container_width=True)

def criar_analise_clubes(df: pd.DataFrame):
    """
    Cria an√°lise por clubes
    
    Args:
        df: DataFrame filtrado
    """
    if df.empty:
        return
    
    st.subheader("üèüÔ∏è An√°lise por Clubes")
    
    # Estat√≠sticas por clube
    clube_stats = df.groupby('Clube').agg({
        'Pontos M√©dia': ['mean', 'count'],
        'Pre√ßo (C$)': 'mean',
        'Custo-Benef√≠cio': 'mean'
    }).round(2)
    
    clube_stats.columns = ['Pontos M√©dios', 'Qtd Jogadores', 'Pre√ßo M√©dio', 'CB M√©dio']
    clube_stats = clube_stats.reset_index()
    clube_stats = clube_stats.sort_values('Pontos M√©dios', ascending=False)
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.bar(
            clube_stats.head(10),
            x='Clube',
            y='Pontos M√©dios',
            color='CB M√©dio',
            title="Top 10 Clubes - Pontua√ß√£o M√©dia",
            color_continuous_scale='Viridis'
        )
        fig.update_xaxes(tickangle=45)
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.scatter(
            clube_stats,
            x='Pre√ßo M√©dio',
            y='Pontos M√©dios',
            size='Qtd Jogadores',
            hover_name='Clube',
            title="Pre√ßo vs Pontos por Clube",
            color='CB M√©dio',
            color_continuous_scale='RdYlBu_r'
        )
        st.plotly_chart(fig, use_container_width=True)

def criar_comparador_jogadores(df: pd.DataFrame):
    """
    Cria ferramenta de compara√ß√£o entre jogadores
    
    Args:
        df: DataFrame filtrado
    """
    if df.empty:
        return
    
    st.subheader("‚öîÔ∏è Comparador de Jogadores")
    
    col1, col2 = st.columns(2)
    
    with col1:
        jogador1 = st.selectbox(
            "Selecione o Jogador 1",
            options=df['Nome'].tolist(),
            help="Escolha o primeiro jogador para compara√ß√£o"
        )
    
    with col2:
        jogador2 = st.selectbox(
            "Selecione o Jogador 2",
            options=df['Nome'].tolist(),
            help="Escolha o segundo jogador para compara√ß√£o"
        )
    
    if jogador1 and jogador2 and jogador1 != jogador2:
        j1_data = df[df['Nome'] == jogador1].iloc[0]
        j2_data = df[df['Nome'] == jogador2].iloc[0]
        
        # M√©tricas comparativas
        col1, col2, col3 = st.columns(3)
        
        metricas = ['Pre√ßo (C$)', 'Pontos M√©dia', 'Custo-Benef√≠cio', 'Partidas', 'Efici√™ncia']
        
        for i, metrica in enumerate(metricas):
            with [col1, col2, col3][i % 3]:
                valor1 = j1_data[metrica]
                valor2 = j2_data[metrica]
                diferenca = valor1 - valor2
                
                st.metric(
                    f"{metrica}",
                    f"{valor1:.2f}",
                    f"{diferenca:+.2f} vs {jogador2}",
                    delta_color="normal" if diferenca >= 0 else "inverse"
                )
        
        # Gr√°fico radar comparativo
        categorias = ['Pontos M√©dia', 'Custo-Benef√≠cio', 'Efici√™ncia', 'Partidas']
        
        # Normalizar valores para escala 0-10
        valores1 = []
        valores2 = []
        
        for cat in categorias:
            max_val = df[cat].max()
            min_val = df[cat].min()
            
            if max_val != min_val:
                v1_norm = 10 * (j1_data[cat] - min_val) / (max_val - min_val)
                v2_norm = 10 * (j2_data[cat] - min_val) / (max_val - min_val)
            else:
                v1_norm = v2_norm = 5
            
            valores1.append(v1_norm)
            valores2.append(v2_norm)
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=valores1 + [valores1[0]],
            theta=categorias + [categorias[0]],
            fill='toself',
            name=jogador1,
            line_color='blue'
        ))
        
        fig.add_trace(go.Scatterpolar(
            r=valores2 + [valores2[0]],
            theta=categorias + [categorias[0]],
            fill='toself',
            name=jogador2,
            line_color='red'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 10]
                )),
            showlegend=True,
            title="Compara√ß√£o Radar dos Jogadores",
            height=500
        )
        
        st.plotly_chart(fig, use_container_width=True)

def criar_ferramentas_exportacao(df: pd.DataFrame):
    """
    Cria ferramentas de exporta√ß√£o de dados
    
    Args:
        df: DataFrame filtrado
    """
    if df.empty:
        return
    
    st.subheader("üìÅ Exportar Dados")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä Exportar CSV"):
            csv = df.to_csv(index=False)
            st.download_button(
                label="‚¨áÔ∏è Download CSV",
                data=csv,
                file_name=f"cartola_jogadores_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv"
            )
    
    with col2:
        if st.button("üìà Exportar JSON"):
            json_data = df.to_json(orient='records', indent=2)
            st.download_button(
                label="‚¨áÔ∏è Download JSON",
                data=json_data,
                file_name=f"cartola_jogadores_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json"
            )
    
    with col3:
        if st.button("üìã Copiar para Clipboard"):
            st.code(df.to_string(index=False))
            st.success("‚úÖ Dados exibidos acima. Use Ctrl+A e Ctrl+C para copiar.")

# ================================
# FUN√á√ÉO PRINCIPAL
# ================================

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Aplicar estilos
    aplicar_estilo_customizado()
    
    # T√≠tulo principal
    st.title("‚öΩ Dashboard Cartola FC 2025 - Vers√£o Pro")
    st.markdown("---")
    
    # Loading state
    with st.spinner("üîÑ Carregando dados da API do Cartola FC..."):
        df = carregar_dados_api()
    
    if df.empty:
        st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Tente novamente mais tarde.")
        st.stop()
    
    # Sucesso no carregamento
    st.success(f"‚úÖ Dados carregados com sucesso! {len(df)} jogadores encontrados.")
    
    # Criar filtros na sidebar
    filtros = criar_filtros_sidebar(df)
    posicao_sel, clube_sel, preco_min, preco_max, media_range, partidas_range, cb_min, ef_min = filtros
    
    # Aplicar filtros
    df_filtrado = df[
        (df["Posi√ß√£o"].isin(posicao_sel)) &
        (df["Clube"].isin(clube_sel)) &
        (df["Pre√ßo (C$)"] >= preco_min) &
        (df["Pre√ßo (C$)"] <= preco_max) &
        (df["Pontos M√©dia"] >= media_range[0]) &
        (df["Pontos M√©dia"] <= media_range[1]) &
        (df["Partidas"] >= partidas_range[0]) &
        (df["Partidas"] <= partidas_range[1]) &
        (df["Custo-Benef√≠cio"] >= cb_min) &
        (df["Efici√™ncia"] >= ef_min)
    ].copy()
    
    # M√©tricas principais
    criar_metricas_principais(df_filtrado)
    
    st.markdown("---")
    
    # Tabs para organizar conte√∫do
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä An√°lise Geral", 
        "üèÜ Rankings", 
        "üèüÔ∏è An√°lise de Clubes", 
        "‚öîÔ∏è Comparador", 
        "üìÅ Exportar"
    ])
    
    with tab1:
        st.header("üìä An√°lise Geral dos Jogadores")
        criar_graficos_avancados(df_filtrado)
        
        # Busca de jogadores
        st.subheader("üîç Buscar Jogador Espec√≠fico")
        nome_busca = st.text_input(
            "Digite o nome do jogador",
            placeholder="Ex: Pedro, Hulk, Gerson...",
            help="Busque por qualquer jogador na lista"
        )
        
        if nome_busca:
            df_busca = df_filtrado[
                df_filtrado["Nome"].str.contains(nome_busca, case=False, na=False)
            ]
            if not df_busca.empty:
                st.dataframe(
                    df_busca.sort_values("Pontos M√©dia", ascending=False),
                    use_container_width=True,
                    height=400
                )
            else:
                st.warning(f"‚ùå Nenhum jogador encontrado com o nome '{nome_busca}'")
    
    with tab2:
        st.header("üèÜ Rankings dos Melhores Jogadores")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üîù Top 15 por Pontos M√©dia")
            top_pontos = df_filtrado.nlargest(15, "Pontos M√©dia")[
                ['Nome', 'Clube', 'Posi√ß√£o', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Status']
            ]
            st.dataframe(top_pontos, use_container_width=True, height=400)
        
        with col2:
            st.subheader("üí∏ Top 15 por Custo-Benef√≠cio")
            top_cb = df_filtrado.nlargest(15, "Custo-Benef√≠cio")[
                ['Nome', 'Clube', 'Posi√ß√£o', 'Custo-Benef√≠cio', 'Pre√ßo (C$)', 'Tend√™ncia']
            ]
            st.dataframe(top_cb, use_container_width=True, height=400)
        
        # Ranking por posi√ß√£o
        st.subheader("üìç Melhores por Posi√ß√£o")
        posicao_ranking = st.selectbox(
            "Selecione uma posi√ß√£o",
            options=df_filtrado['Posi√ß√£o'].unique(),
            help="Veja os melhores jogadores de cada posi√ß√£o"
        )
        
        if posicao_ranking:
            df_posicao = df_filtrado[df_filtrado['Posi√ß√£o'] == posicao_ranking].nlargest(10, 'Pontos M√©dia')
            st.dataframe(
                df_posicao[['Nome', 'Clube', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Custo-Benef√≠cio', 'Efici√™ncia']],
                use_container_width=True
            )
    
    with tab3:
        criar_analise_clubes(df_filtrado)
    
    with tab4:
        criar_comparador_jogadores(df_filtrado)
    
    with tab5:
        criar_ferramentas_exportacao(df_filtrado)
    
    # Lista completa no final
    st.markdown("---")
    st.header("üìÑ Lista Completa de Jogadores")
    
    # Op√ß√µes de visualiza√ß√£o
    col1, col2, col3 = st.columns(3)
    with col1:
        ordenar_por = st.selectbox(
            "Ordenar por:",
            ['Pontos M√©dia', 'Custo-Benef√≠cio', 'Pre√ßo (C$)', 'Efici√™ncia', 'Nome'],
            help="Escolha o crit√©rio de ordena√ß√£o"
        )
    
    with col2:
        ordem = st.selectbox("Ordem:", ['Decrescente', 'Crescente'])
    
    with col3:
        mostrar_scouts = st.checkbox("Mostrar Scouts", help="Exibir estat√≠sticas detalhadas dos scouts")
    
    # Ordena√ß√£o
    ascending = ordem == 'Crescente'
    df_ordenado = df_filtrado.sort_values(ordenar_por, ascending=ascending)
    
    # Colunas a exibir
    colunas_base = ['Nome', 'Clube', 'Posi√ß√£o', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Custo-Benef√≠cio', 'Partidas', 'Status', 'Tend√™ncia']
    
    if mostrar_scouts:
        scouts_cols = [col for col in df_ordenado.columns if col not in colunas_base and col not in ['ID', 'Foto', 'Status_Mercado', 'Efici√™ncia']]
        colunas_exibir = colunas_base + scouts_cols
    else:
        colunas_exibir = colunas_base
    
    st.dataframe(
        df_ordenado[colunas_exibir],
        use_container_width=True,
        height=500
    )
    
    # Rodap√©
    st.markdown("---")
    st.markdown("**Desenvolvido por Carlos Willian - Cartola FC 2025 (Vers√£o Melhorada)**")
    st.caption(f"√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')} | Dados da API oficial do Cartola FC")

if __name__ == "__main__":
    main()

