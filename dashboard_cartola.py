"""
Dashboard Cartola FC 2025 - Vers√£o Melhorada com Interface Aprimorada
Author: Carlos Willian (Melhorado por IA)
Funcionalidades: An√°lise avan√ßada de jogadores do Cartola FC
"""

import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
import json
from typing import Dict, List, Optional, Tuple
import warnings
warnings.filterwarnings('ignore')

# ================================
# CONFIGURA√á√ïES GLOBAIS
# ================================

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard Cartola FC 2025",
    page_icon="‚öΩ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# URLs da API
API_URLS = {
    'mercado': 'https://api.cartola.globo.com/atletas/mercado',
    'status': 'https://api.cartola.globo.com/mercado/status',
    'pontuados': 'https://api.cartola.globo.com/atletas/pontuados'
}

# Constantes
CACHE_TTL = 300  # 5 minutos
MAX_RETRIES = 3
TIMEOUT = 10

# ================================
# ESTILO CUSTOMIZADO - NOVA PALETA
# ================================

def aplicar_estilo_customizado():
    """Aplica estilos CSS customizados com paleta roxa mais limpa"""
    st.markdown("""
    <style>
    /* Importar fonte Google */
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
    
    /* Tema geral - Gradiente roxo mais suave */
    .stApp {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        font-family: 'Inter', sans-serif;
    }
    
    /* Sidebar moderna */
    .css-1d391kg {
        background: linear-gradient(180deg, #667eea 0%, #764ba2 100%);
        border-right: 2px solid rgba(255,255,255,0.1);
    }
    
    /* T√≠tulo da sidebar */
    .css-1d391kg h2 {
        color: white !important;
        font-weight: 600;
        text-align: center;
        margin-bottom: 1.5rem;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    /* Texto da sidebar */
    .css-1d391kg .stMarkdown, 
    .css-1d391kg .stSelectbox label,
    .css-1d391kg .stMultiSelect label,
    .css-1d391kg .stSlider label {
        color: white !important;
        font-weight: 500;
    }
    
    /* Cards de filtros na sidebar */
    .css-1d391kg .stExpander {
        background: rgba(255, 255, 255, 0.15) !important;
        border-radius: 12px !important;
        border: 1px solid rgba(255, 255, 255, 0.2) !important;
        backdrop-filter: blur(10px);
        margin-bottom: 1rem;
    }
    
    /* Cards de m√©tricas principais */
    [data-testid="metric-container"] {
        background: white;
        border: 1px solid #e1e5e9;
        padding: 1.5rem;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }
    
    [data-testid="metric-container"]:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 16px rgba(102, 126, 234, 0.15);
    }
    
    /* Multiselect com cor roxa */
    .stMultiSelect [data-baseweb="select"] span {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        color: white !important;
        border-radius: 6px;
        font-weight: 500;
    }
    
    /* Bot√µes modernos */
    .stButton > button {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border: none;
        border-radius: 8px;
        padding: 0.6rem 1.2rem;
        font-weight: 500;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
    }
    
    .stButton > button:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        background: linear-gradient(45deg, #5a67d8, #6b46c1);
    }
    
    /* Dataframes com fundo branco limpo */
    .stDataFrame {
        background: white !important;
        border-radius: 12px !important;
        overflow: hidden !important;
        border: 1px solid #e1e5e9 !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05) !important;
    }
    
    /* Cabe√ßalhos das tabelas */
    .stDataFrame thead th {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        color: white !important;
        font-weight: 600 !important;
        border: none !important;
    }
    
    /* C√©lulas das tabelas */
    .stDataFrame tbody td {
        background: white !important;
        border-bottom: 1px solid #f1f3f4 !important;
    }
    
    /* Altern√¢ncia de cores nas linhas */
    .stDataFrame tbody tr:nth-child(even) {
        background: #f8f9fa !important;
    }
    
    /* Tabs modernas */
    .stTabs [data-baseweb="tab-list"] {
        background: white;
        border-radius: 12px;
        padding: 0.5rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
    }
    
    .stTabs [data-baseweb="tab"] {
        background: transparent;
        border-radius: 8px;
        color: #666;
        font-weight: 500;
    }
    
    .stTabs [aria-selected="true"] {
        background: linear-gradient(45deg, #667eea, #764ba2) !important;
        color: white !important;
    }
    
    /* Alertas personalizados */
    .stAlert {
        border-radius: 12px;
        border-left: 4px solid #667eea;
        background: white;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
    }
    
    /* Headers principais */
    .main h1, .main h2, .main h3 {
        color: #2d3748;
        font-weight: 600;
    }
    
    /* Selectbox melhorado */
    .stSelectbox > div > div {
        background: rgba(255, 255, 255, 0.2);
        border: 1px solid rgba(255, 255, 255, 0.3);
        border-radius: 8px;
        color: white;
    }
    
    /* Slider customizado */
    .stSlider > div > div > div > div {
        background: linear-gradient(45deg, #667eea, #764ba2);
    }
    
    /* Gr√°ficos com fundo limpo */
    .js-plotly-plot {
        background: white !important;
        border-radius: 12px !important;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05) !important;
    }
    
    /* Cards de filtros */
    .filter-card {
        background: rgba(255, 255, 255, 0.15);
        border-radius: 12px;
        padding: 1rem;
        margin: 0.5rem 0;
        border: 1px solid rgba(255, 255, 255, 0.2);
        backdrop-filter: blur(10px);
    }
    
    /* Loading spinner */
    .stSpinner > div {
        border-top-color: #667eea !important;
    }
    </style>
    """, unsafe_allow_html=True)

# ================================
# FUN√á√ïES DE UTILIT√ÅRIOS
# ================================

class ApiException(Exception):
    """Exce√ß√£o customizada para erros da API"""
    pass

def fazer_requisicao_api(url: str, max_retries: int = MAX_RETRIES) -> Dict:
    """
    Faz requisi√ß√£o para API com retry e tratamento de erro
    """
    for tentativa in range(max_retries):
        try:
            response = requests.get(url, timeout=TIMEOUT)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            if tentativa == max_retries - 1:
                raise ApiException(f"Erro na API ap√≥s {max_retries} tentativas: {str(e)}")
            time.sleep(1)

def validar_dados_jogadores(dados: Dict) -> bool:
    """Valida se os dados recebidos da API est√£o corretos"""
    campos_obrigatorios = ['atletas', 'clubes', 'posicoes']
    return all(campo in dados for campo in campos_obrigatorios)

def calcular_estatisticas_avancadas(df: pd.DataFrame) -> pd.DataFrame:
    """
    Calcula estat√≠sticas avan√ßadas dos jogadores
    
    INDICADORES EXPLICADOS:
    
    1. CUSTO-BENEF√çCIO = Pontos M√©dia √∑ Pre√ßo (C$)
       - Mede quantos pontos voc√™ ganha por cada C$ investido
       - Exemplo: 8 pontos, C$ 10,00 = 0.8 pontos por C$
    
    2. EFICI√äNCIA = (Pontos M√©dia √ó Partidas) √∑ Pre√ßo (C$)  
       - Considera consist√™ncia (partidas jogadas) + m√©dia
       - Favorece jogadores que jogam mais e mant√™m boa m√©dia
    
    3. STATUS = Classifica√ß√£o baseada na Pontos M√©dia:
       - üî¥ Baixo: < 2.0 pontos
       - üü° Regular: 2.0 - 4.9 pontos  
       - üü¢ Bom: 5.0 - 7.9 pontos
       - üîµ Excelente: >= 8.0 pontos
    
    4. VALORIZA√á√ÉO = Simulado (precisa dados hist√≥ricos)
       - F√≥rmula real: (Pre√ßo Atual - Pre√ßo Anterior) √∑ Pre√ßo Anterior √ó 100
    
    5. TEND√äNCIA = üìà se Valoriza√ß√£o > 0, sen√£o üìâ
    """
    if df.empty:
        return df
    
    # 1. Custo-Benef√≠cio: pontos por cartola$ investido
    df['Custo-Benef√≠cio'] = df['Pontos M√©dia'] / df['Pre√ßo (C$)'].replace(0, 0.1)
    
    # 2. Efici√™ncia: considera consist√™ncia (partidas) + m√©dia
    df['Efici√™ncia'] = (df['Pontos M√©dia'] * df['Partidas']) / df['Pre√ßo (C$)'].replace(0, 0.1)
    
    # 3. Valoriza√ß√£o simulada (no mundo real usaria hist√≥rico de pre√ßos)
    np.random.seed(42)  # Para resultados consistentes
    df['Valoriza√ß√£o (%)'] = np.random.normal(0, 8, len(df)).round(1)
    
    # 4. Tend√™ncia baseada na valoriza√ß√£o
    df['Tend√™ncia'] = np.where(df['Valoriza√ß√£o (%)'] > 0, 'üìà', 'üìâ')
    
    # 5. Status baseado na pontua√ß√£o m√©dia
    df['Status'] = pd.cut(
        df['Pontos M√©dia'], 
        bins=[-np.inf, 2, 5, 8, np.inf], 
        labels=['üî¥ Baixo', 'üü° Regular', 'üü¢ Bom', 'üîµ Excelente']
    )
    
    return df

# ================================
# FUN√á√ïES DE CARREGAMENTO DE DADOS
# ================================

@st.cache_data(ttl=CACHE_TTL, show_spinner=False)
def carregar_dados_api() -> pd.DataFrame:
    """Carrega dados da API do Cartola FC com cache otimizado"""
    try:
        # Status da API
        try:
            status_data = fazer_requisicao_api(API_URLS['status'])
        except:
            status_data = {'status_mercado_desc': 'Indispon√≠vel'}
        
        # Dados do mercado
        mercado_data = fazer_requisicao_api(API_URLS['mercado'])
        
        if not validar_dados_jogadores(mercado_data):
            raise ApiException("Dados da API inv√°lidos")
        
        jogadores = mercado_data['atletas']
        clubes = mercado_data['clubes']
        posicoes = mercado_data['posicoes']
        
        # Processamento dos dados
        scouts_data = []
        for jogador in jogadores:
            try:
                clube_nome = clubes.get(str(jogador['clube_id']), {}).get('nome', 'Desconhecido')
                posicao_nome = posicoes.get(str(jogador['posicao_id']), {}).get('nome', 'Desconhecido')
                scouts = jogador.get('scout', {})
                
                dados_jogador = {
                    'ID': jogador.get('atleta_id', 0),
                    'Nome': jogador.get('apelido', 'N/A'),
                    'Clube': clube_nome,
                    'Posi√ß√£o': posicao_nome,
                    'Pre√ßo (C$)': float(jogador.get('preco_num', 0)),
                    'Pontos M√©dia': float(jogador.get('media_num', 0)),
                    'Partidas': int(jogador.get('jogos_num', 0)),
                    'Foto': jogador.get('foto', ''),
                    'Status_Mercado': status_data.get('status_mercado_desc', 'Desconhecido')
                }
                
                # Adiciona scouts
                dados_jogador.update(scouts)
                scouts_data.append(dados_jogador)
                
            except Exception:
                continue
        
        df = pd.DataFrame(scouts_data)
        
        if df.empty:
            raise ApiException("Nenhum dado de jogador encontrado")
        
        # Limpeza e convers√£o de dados
        df = df.convert_dtypes()
        colunas_numericas = ['Pre√ßo (C$)', 'Pontos M√©dia', 'Partidas']
        for col in colunas_numericas:
            if col in df.columns:
                df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
        
        # Estat√≠sticas avan√ßadas
        df = calcular_estatisticas_avancadas(df)
        
        return df
        
    except ApiException as e:
        st.error(f"‚ùå Erro na API: {e}")
        return pd.DataFrame()
    except Exception as e:
        st.error(f"‚ùå Erro inesperado: {e}")
        return pd.DataFrame()

# ================================
# COMPONENTES DA INTERFACE - MELHORADOS
# ================================

def criar_filtros_sidebar_melhorados(df: pd.DataFrame) -> Tuple:
    """Cria filtros melhorados na sidebar com interface moderna"""
    if df.empty:
        return [], [], 0, 0, (0, 0), (0, 0), 0, 0
    
    st.sidebar.markdown("## ‚öôÔ∏è Configura√ß√µes Avan√ßadas")
    
    # Info do sistema em card
    with st.sidebar.expander("‚ÑπÔ∏è Sistema", expanded=False):
        st.markdown(f"""
        <div class='filter-card'>
            <h4>üìä Status do Sistema</h4>
            <p><strong>üïí Atualizado:</strong> {datetime.now().strftime('%H:%M:%S')}</p>
            <p><strong>‚è±Ô∏è Cache:</strong> {CACHE_TTL//60} min</p>
            <p><strong>üìà Total:</strong> {len(df):,} jogadores</p>
        </div>
        """, unsafe_allow_html=True)
    
    # === FILTROS PRINCIPAIS ===
    with st.sidebar.expander("üéØ Filtros Principais", expanded=True):
        st.markdown("### üß© Posi√ß√µes")
        posicoes = sorted(df["Posi√ß√£o"].unique().tolist())
        posicao_selecionada = st.multiselect(
            "Selecione as posi√ß√µes:",
            posicoes, 
            default=posicoes,
            help="üéØ Escolha as posi√ß√µes que deseja analisar"
        )
        
        st.markdown("### üè≥Ô∏è Clubes")  
        clubes = sorted(df["Clube"].unique().tolist())
        clube_selecionado = st.multiselect(
            "Selecione os clubes:",
            clubes, 
            default=clubes,
            help="üèüÔ∏è Escolha os clubes que deseja analisar"
        )
    
    # === FILTROS DE VALORES ===
    with st.sidebar.expander("üí∞ Filtros de Pre√ßo e Performance", expanded=True):
        st.markdown("### üí∏ Faixa de Pre√ßo")
        preco_min, preco_max = st.slider(
            "Pre√ßo em Cartola$ (C$)",
            int(df["Pre√ßo (C$)"].min()),
            int(df["Pre√ßo (C$)"].max()),
            (int(df["Pre√ßo (C$)"].min()), int(df["Pre√ßo (C$)"].max())),
            help="üí∞ Defina a faixa de pre√ßo dos jogadores"
        )
        
        st.markdown("### üìä Pontua√ß√£o M√©dia")
        media_min, media_max = st.slider(
            "Faixa de pontos por jogo",
            float(df["Pontos M√©dia"].min()),
            float(df["Pontos M√©dia"].max()),
            (float(df["Pontos M√©dia"].min()), float(df["Pontos M√©dia"].max())),
            step=0.1,
            help="üìà Defina a pontua√ß√£o m√©dia desejada"
        )
        
        st.markdown("### üéØ Participa√ß√£o")
        partidas_min, partidas_max = st.slider(
            "N√∫mero de partidas jogadas",
            int(df["Partidas"].min()),
            int(df["Partidas"].max()),
            (int(df["Partidas"].min()), int(df["Partidas"].max())),
            help="‚öΩ Filtro de consist√™ncia do jogador"
        )
    
    # === FILTROS AVAN√áADOS ===
    with st.sidebar.expander("üî¨ An√°lise Avan√ßada", expanded=False):
        st.markdown("### üíé Custo-Benef√≠cio")
        cb_min = st.slider(
            "Custo-benef√≠cio m√≠nimo",
            0.0,
            float(df["Custo-Benef√≠cio"].max()),
            0.0,
            step=0.01,
            help="üí° Pontos por C$ investido (quanto maior, melhor)"
        )
        
        st.markdown("### ‚ö° Efici√™ncia")
        eficiencia_min = st.slider(
            "Efici√™ncia m√≠nima",
            0.0,
            float(df["Efici√™ncia"].max()),
            0.0,
            step=0.01,
            help="üéØ Considera m√©dia + consist√™ncia + pre√ßo"
        )
        
        # Resumo dos filtros
        filtros_ativos = []
        if len(posicao_selecionada) < len(posicoes):
            filtros_ativos.append(f"{len(posicao_selecionada)} posi√ß√µes")
        if len(clube_selecionado) < len(clubes):
            filtros_ativos.append(f"{len(clube_selecionado)} clubes")
        if cb_min > 0:
            filtros_ativos.append(f"CB > {cb_min}")
        if eficiencia_min > 0:
            filtros_ativos.append(f"Efic > {eficiencia_min}")
            
        if filtros_ativos:
            st.info(f"üîç **Filtros ativos:** {', '.join(filtros_ativos)}")
    
    return (posicao_selecionada, clube_selecionado, preco_min, preco_max, 
            (media_min, media_max), (partidas_min, partidas_max), cb_min, eficiencia_min)

def criar_metricas_principais(df: pd.DataFrame):
    """Cria as m√©tricas principais do dashboard"""
    if df.empty:
        st.warning("‚ö†Ô∏è Nenhum jogador encontrado com os filtros aplicados")
        return
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        st.metric(
            "üë• Jogadores",
            f"{len(df):,}",
            help="Total de jogadores filtrados"
        )
    
    with col2:
        preco_medio = df['Pre√ßo (C$)'].mean()
        st.metric(
            "üí∞ Pre√ßo M√©dio",
            f"C$ {preco_medio:.1f}",
            help="Pre√ßo m√©dio dos jogadores selecionados"
        )
    
    with col3:
        pontos_medio = df['Pontos M√©dia'].mean()
        st.metric(
            "üìä Pontua√ß√£o",
            f"{pontos_medio:.1f}",
            help="Pontua√ß√£o m√©dia dos jogadores"
        )
    
    with col4:
        cb_medio = df['Custo-Benef√≠cio'].mean()
        st.metric(
            "üíé Custo-Benef√≠cio",
            f"{cb_medio:.2f}",
            help="Pontos por C$ investido (m√©dia)"
        )
    
    with col5:
        eficiencia_media = df['Efici√™ncia'].mean()
        st.metric(
            "‚ö° Efici√™ncia",
            f"{eficiencia_media:.1f}",
            help="M√©dia √ó Partidas √∑ Pre√ßo"
        )

def criar_graficos_limpos(df: pd.DataFrame):
    """Cria gr√°ficos com fundo limpo e cores harmoniosas"""
    if df.empty:
        return
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üìà An√°lise Pre√ßo vs Performance")
        
        fig = px.scatter(
            df,
            x="Pre√ßo (C$)",
            y="Pontos M√©dia",
            color="Posi√ß√£o",
            size="Partidas",
            hover_name="Nome",
            hover_data=["Clube", "Custo-Benef√≠cio"],
            title="Rela√ß√£o entre Pre√ßo e Pontua√ß√£o",
            color_discrete_sequence=px.colors.qualitative.Pastel1
        )
        
        fig.update_traces(
            marker=dict(
                opacity=0.8,
                line=dict(width=1, color='white')
            )
        )
        
        fig.update_layout(
            plot_bgcolor='white',
            paper_bgcolor='white',
            height=500,
            showlegend=True,
            hovermode='closest',
            font=dict(family="Inter, sans-serif", size=12)
        )
        
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
    
    with col2:
        st.subheader("üèÜ Top Custo-Benef√≠cio")
        
        top_cb = df.nlargest(10, 'Custo-Benef√≠cio')
        
        # Paleta de cores roxa personalizada
        cores_roxas = ['#667eea', '#764ba2', '#8b5cf6', '#a855f7', '#c084fc', 
                       '#d8b4fe', '#e879f9', '#f0abfc', '#f3e8ff', '#faf5ff']
        
        fig = px.bar(
            top_cb,
            x='Custo-Benef√≠cio',
            y='Nome',
            orientation='h',
            hover_data=['Clube', 'Pre√ßo (C$)', 'Pontos M√©dia'],
            title="Melhor Retorno por Cartola$ Investido",
            color='Custo-Benef√≠cio',
            color_continuous_scale=['#f8f9fa', '#667eea']
        )
        
        fig.update_layout(
            plot_bgcolor='white',
            paper_bgcolor='white',
            height=500,
            yaxis={'categoryorder': 'total ascending'},
            coloraxis_showscale=False,
            font=dict(family="Inter, sans-serif", size=12)
        )
        
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})

def criar_comparador_melhorado(df: pd.DataFrame):
    """Comparador com selectbox pesquis√°vel"""
    if df.empty:
        return
    
    st.subheader("‚öîÔ∏è Comparador Avan√ßado de Jogadores")
    
    # Criar lista para o selectbox com informa√ß√µes extras
    opcoes_jogadores = []
    for idx, jogador in df.iterrows():
        info = f"{jogador['Nome']} - {jogador['Clube']} ({jogador['Posi√ß√£o']}) - C${jogador['Pre√ßo (C$)']:.0f}"
        opcoes_jogadores.append(info)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("### ü•á Primeiro Jogador")
        jogador1_info = st.selectbox(
            "üîç Digite para pesquisar:",
            options=opcoes_jogadores,
            help="Digite o nome do jogador para filtrar as op√ß√µes",
            key="jogador1"
        )
        jogador1_nome = jogador1_info.split(" - ")[0] if jogador1_info else None
    
    with col2:
        st.markdown("### ü•à Segundo Jogador")
        jogador2_info = st.selectbox(
            "üîç Digite para pesquisar:",
            options=opcoes_jogadores,
            help="Digite o nome do jogador para filtrar as op√ß√µes",
            key="jogador2"
        )
        jogador2_nome = jogador2_info.split(" - ")[0] if jogador2_info else None
    
    if jogador1_nome and jogador2_nome and jogador1_nome != jogador2_nome:
        j1_data = df[df['Nome'] == jogador1_nome].iloc[0]
        j2_data = df[df['Nome'] == jogador2_nome].iloc[0]
        
        # Cards informativos dos jogadores
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown(f"""
            <div style='background: white; padding: 1rem; border-radius: 12px; border: 2px solid #667eea; margin-bottom: 1rem;'>
                <h4 style='color: #667eea; margin: 0;'>ü•á {j1_data['Nome']}</h4>
                <p style='margin: 0.5rem 0; color: #666;'><strong>{j1_data['Clube']}</strong> ‚Ä¢ {j1_data['Posi√ß√£o']}</p>
                <p style='margin: 0; color: #333;'>üí∞ C$ {j1_data['Pre√ßo (C$)']:.0f} ‚Ä¢ {j1_data['Status']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown(f"""
            <div style='background: white; padding: 1rem; border-radius: 12px; border: 2px solid #764ba2; margin-bottom: 1rem;'>
                <h4 style='color: #764ba2; margin: 0;'>ü•à {j2_data['Nome']}</h4>
                <p style='margin: 0.5rem 0; color: #666;'><strong>{j2_data['Clube']}</strong> ‚Ä¢ {j2_data['Posi√ß√£o']}</p>
                <p style='margin: 0; color: #333;'>üí∞ C$ {j2_data['Pre√ßo (C$)']:.0f} ‚Ä¢ {j2_data['Status']}</p>
            </div>
            """, unsafe_allow_html=True)
        
        # M√©tricas comparativas em layout melhorado
        st.markdown("### üìä Compara√ß√£o de Performance")
        
        metricas_comparacao = {
            'üí∞ Pre√ßo (C$)': 'Pre√ßo (C$)',
            'üìà Pontos M√©dia': 'Pontos M√©dia', 
            'üíé Custo-Benef√≠cio': 'Custo-Benef√≠cio',
            '‚öΩ Partidas': 'Partidas',
            '‚ö° Efici√™ncia': 'Efici√™ncia'
        }
        
        col1, col2, col3 = st.columns(3)
        cols = [col1, col2, col3]
        
        for i, (nome_metrica, campo) in enumerate(metricas_comparacao.items()):
            with cols[i % 3]:
                valor1 = j1_data[campo]
                valor2 = j2_data[campo]
                diferenca = valor1 - valor2
                
                # Determinar qual √© melhor (para algumas m√©tricas menor √© melhor)
                if campo == 'Pre√ßo (C$)':
                    melhor = "normal" if diferenca <= 0 else "inverse"
                else:
                    melhor = "normal" if diferenca >= 0 else "inverse"
                
                st.metric(
                    nome_metrica,
                    f"{valor1:.2f}",
                    f"{diferenca:+.2f}",
                    delta_color=melhor
                )
        
        # Gr√°fico radar melhorado
        st.markdown("### üéØ Compara√ß√£o Visual")
        
        categorias = ['Pontos M√©dia', 'Custo-Benef√≠cio', 'Efici√™ncia']
        
        # Normalizar valores
        valores1 = []
        valores2 = []
        
        for cat in categorias:
            max_val = df[cat].max()
            min_val = df[cat].min()
            
            if max_val != min_val:
                v1_norm = 10 * (j1_data[cat] - min_val) / (max_val - min_val)
                v2_norm = 10 * (j2_data[cat] - min_val) / (max_val - min_val)
            else:
                v1_norm = v2_norm = 5
            
            valores1.append(max(0, v1_norm))
            valores2.append(max(0, v2_norm))
        
        fig = go.Figure()
        
        fig.add_trace(go.Scatterpolar(
            r=valores1 + [valores1[0]],
            theta=categorias + [categorias[0]],
            fill='toself',
            name=j1_data['Nome'],
            line_color='#667eea',
            fillcolor='rgba(102, 126, 234, 0.2)'
        ))
        
        fig.add_trace(go.Scatterpolar(
            r=valores2 + [valores2[0]],
            theta=categorias + [categorias[0]],
            fill='toself',
            name=j2_data['Nome'],
            line_color='#764ba2',
            fillcolor='rgba(118, 75, 162, 0.2)'
        ))
        
        fig.update_layout(
            polar=dict(
                radialaxis=dict(
                    visible=True,
                    range=[0, 10],
                    gridcolor='#e1e5e9',
                    tickcolor='#666'
                ),
                angularaxis=dict(
                    gridcolor='#e1e5e9'
                )
            ),
            showlegend=True,
            title="Compara√ß√£o Normalizada (0-10)",
            height=500,
            plot_bgcolor='white',
            paper_bgcolor='white',
            font=dict(family="Inter, sans-serif", size=12)
        )
        
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
    
    else:
        st.info("üîç Selecione dois jogadores diferentes para come√ßar a compara√ß√£o")

def criar_analise_clubes(df: pd.DataFrame):
    """An√°lise por clubes com gr√°ficos limpos"""
    if df.empty:
        return
    
    st.subheader("üèüÔ∏è Performance por Clube")
    
    clube_stats = df.groupby('Clube').agg({
        'Pontos M√©dia': ['mean', 'count'],
        'Pre√ßo (C$)': 'mean',
        'Custo-Benef√≠cio': 'mean'
    }).round(2)
    
    clube_stats.columns = ['Pontos M√©dios', 'Qtd Jogadores', 'Pre√ßo M√©dio', 'CB M√©dio']
    clube_stats = clube_stats.reset_index()
    clube_stats = clube_stats.sort_values('Pontos M√©dios', ascending=False)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üèÜ Top Clubes por Pontua√ß√£o")
        fig = px.bar(
            clube_stats.head(10),
            x='Clube',
            y='Pontos M√©dios',
            color='CB M√©dio',
            title="Pontua√ß√£o M√©dia por Clube",
            color_continuous_scale=['#f8f9fa', '#667eea']
        )
        fig.update_xaxes(tickangle=45)
        fig.update_layout(
            plot_bgcolor='white',
            paper_bgcolor='white',
            coloraxis_showscale=False,
            font=dict(family="Inter, sans-serif", size=12)
        )
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})
    
    with col2:
        st.markdown("#### üí∞ An√°lise Pre√ßo vs Performance")
        fig = px.scatter(
            clube_stats,
            x='Pre√ßo M√©dio',
            y='Pontos M√©dios',
            size='Qtd Jogadores',
            hover_name='Clube',
            title="Custo vs Benef√≠cio por Clube",
            color='CB M√©dio',
            color_continuous_scale=['#fef7ff', '#667eea']
        )
        fig.update_layout(
            plot_bgcolor='white',
            paper_bgcolor='white',
            coloraxis_showscale=False,
            font=dict(family="Inter, sans-serif", size=12)
        )
        st.plotly_chart(fig, use_container_width=True, config={'displayModeBar': False})

def criar_ferramentas_exportacao(df: pd.DataFrame):
    """Ferramentas de exporta√ß√£o melhoradas"""
    if df.empty:
        return
    
    st.subheader("üìÅ Exportar An√°lises")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("#### üìä Planilha Excel")
        if st.button("üìä Gerar CSV", use_container_width=True):
            csv = df.to_csv(index=False)
            st.download_button(
                label="‚¨áÔ∏è Download CSV",
                data=csv,
                file_name=f"cartola_analise_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
                mime="text/csv",
                use_container_width=True
            )
    
    with col2:
        st.markdown("#### üìã Dados JSON")
        if st.button("üìã Gerar JSON", use_container_width=True):
            json_data = df.to_json(orient='records', indent=2)
            st.download_button(
                label="‚¨áÔ∏è Download JSON",
                data=json_data,
                file_name=f"cartola_dados_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
                mime="application/json",
                use_container_width=True
            )
    
    with col3:
        st.markdown("#### üìà Relat√≥rio")
        if st.button("üìà Visualizar", use_container_width=True):
            st.info("üìã **Pr√©via dos dados abaixo**")
            st.dataframe(
                df[['Nome', 'Clube', 'Posi√ß√£o', 'Pre√ßo (C$)', 'Pontos M√©dia', 'Custo-Benef√≠cio']].head(20),
                use_container_width=True
            )

# ================================
# FUN√á√ÉO PRINCIPAL
# ================================

def main():
    """Fun√ß√£o principal do dashboard"""
    
    # Aplicar estilos
    aplicar_estilo_customizado()
    
    # Header principal
    st.markdown("""
    <div style='text-align: center; padding: 2rem 0; background: white; border-radius: 12px; margin-bottom: 2rem; box-shadow: 0 2px 8px rgba(0,0,0,0.05);'>
        <h1 style='color: #2d3748; font-weight: 600; margin: 0;'>‚öΩ Dashboard Cartola FC 2025</h1>
        <p style='color: #666; font-size: 1.1rem; margin: 0.5rem 0 0 0;'>An√°lise Inteligente e Compara√ß√£o de Jogadores</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Loading state
    with st.spinner("üîÑ Carregando dados da API do Cartola FC..."):
        df = carregar_dados_api()
    
    if df.empty:
        st.error("‚ùå N√£o foi poss√≠vel carregar os dados. Tente novamente mais tarde.")
        st.stop()
    
    # Sucesso no carregamento
    st.success(f"‚úÖ **{len(df)} jogadores carregados** com sucesso da API oficial!")
    
    # Criar filtros melhorados na sidebar
    filtros = criar_filtros_sidebar_melhorados(df)
    posicao_sel, clube_sel, preco_min, preco_max, media_range, partidas_range, cb_min, ef_min = filtros
    
    # Aplicar filtros
    df_filtrado = df[
        (df["Posi√ß√£o"].isin(posicao_sel)) &
        (df["Clube"].isin(clube_sel)) &
        (df["Pre√ßo (C$)"] >= preco_min) &
        (df["Pre√ßo (C$)"] <= preco_max) &
        (df["Pontos M√©dia"] >= media_range[0]) &
        (df["Pontos M√©dia"] <= media_range[1]) &
        (df["Partidas"] >= partidas_range[0]) &
        (df["Partidas"] <= partidas_range[1]) &
        (df["Custo-Benef√≠cio"] >= cb_min) &
        (df["Efici√™ncia"] >= ef_min)
    ].copy()
    
    # M√©tricas principais
    criar_metricas_principais(df_filtrado)
    
    st.markdown("<br>", unsafe_allow_html=True)
    
    # Tabs organizadas
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìä Vis√£o Geral", 
        "üèÜ Rankings", 
        "üèüÔ∏è An√°lise de Clubes", 
        "‚öîÔ∏è Comparador", 
        "üìÅ Exportar Dados"
    ])
    
    with tab1:
        st.markdown("### üìà An√°lise Geral dos Jogadores")
        criar_graficos_limpos(df_filtrado)
        
        # Busca melhorada
        st.markdown("### üîç Busca Inteligente")
        col1, col2 = st.columns([3, 1])
        
        with col1:
            nome_busca = st.text_input(
                "Digite o nome do jogador:",
                placeholder="Ex: Pedro, Hulk, Gerson...",
                help="üîç Busque por qualquer jogador na lista filtrada"
            )
        
        with col2:
            st.markdown("<br>", unsafe_allow_html=True)
            buscar = st.button("üîç Buscar", use_container_width=True)
        
        if nome_busca or buscar:
            df_busca = df_filtrado[
                df_filtrado["Nome"].str.contains(nome_busca, case=False, na=False)
            ]
            if not df_busca.empty:
                st.success(f"‚úÖ {len(df_busca)} jogador(es) encontrado(s)")
                st.dataframe(
                    df_busca.sort_values("Pontos M√©dia", ascending=False)[
                        ['Nome', 'Clube', 'Posi√ß√£o', 'Pre√ßo (C$)', 'Pontos M√©dia', 'Custo-Benef√≠cio', 'Status']
                    ],
                    use_container_width=True,
                    height=300
                )
            else:
                st.warning(f"‚ùå Nenhum jogador encontrado com '{nome_busca}'")
    
    with tab2:
        st.markdown("### üèÜ Rankings dos Melhores Jogadores")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("#### üîù Melhores por Pontua√ß√£o")
            top_pontos = df_filtrado.nlargest(15, "Pontos M√©dia")[
                ['Nome', 'Clube', 'Posi√ß√£o', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Status']
            ]
            st.dataframe(top_pontos, use_container_width=True, height=400)
        
        with col2:
            st.markdown("#### üíé Melhores Custo-Benef√≠cio")
            top_cb = df_filtrado.nlargest(15, "Custo-Benef√≠cio")[
                ['Nome', 'Clube', 'Posi√ß√£o', 'Custo-Benef√≠cio', 'Pre√ßo (C$)', 'Tend√™ncia']
            ]
            st.dataframe(top_cb, use_container_width=True, height=400)
        
        # Ranking por posi√ß√£o
        st.markdown("#### üìç An√°lise por Posi√ß√£o")
        posicao_ranking = st.selectbox(
            "Selecione uma posi√ß√£o para an√°lise detalhada:",
            options=df_filtrado['Posi√ß√£o'].unique(),
            help="üéØ Veja o ranking detalhado de cada posi√ß√£o"
        )
        
        if posicao_ranking:
            df_posicao = df_filtrado[df_filtrado['Posi√ß√£o'] == posicao_ranking].nlargest(10, 'Pontos M√©dia')
            
            st.markdown(f"**Top 10 {posicao_ranking}:**")
            st.dataframe(
                df_posicao[['Nome', 'Clube', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Custo-Benef√≠cio', 'Efici√™ncia', 'Status']],
                use_container_width=True,
                height=350
            )
    
    with tab3:
        criar_analise_clubes(df_filtrado)
    
    with tab4:
        criar_comparador_melhorado(df_filtrado)
    
    with tab5:
        criar_ferramentas_exportacao(df_filtrado)
    
    # Lista completa
    st.markdown("---")
    st.markdown("### üìã Lista Completa de Jogadores")
    
    # Controles de visualiza√ß√£o
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        ordenar_por = st.selectbox(
            "üìä Ordenar por:",
            ['Pontos M√©dia', 'Custo-Benef√≠cio', 'Pre√ßo (C$)', 'Efici√™ncia', 'Nome'],
            help="Escolha o crit√©rio de ordena√ß√£o"
        )
    
    with col2:
        ordem = st.selectbox("üìà Ordem:", ['Decrescente', 'Crescente'])
    
    with col3:
        mostrar_scouts = st.checkbox("‚öΩ Mostrar Scouts", help="Exibir estat√≠sticas detalhadas")
    
    with col4:
        st.markdown("<br>", unsafe_allow_html=True)
        if st.button("üîÑ Atualizar Lista", use_container_width=True):
            st.rerun()
    
    # Aplicar ordena√ß√£o
    ascending = ordem == 'Crescente'
    df_ordenado = df_filtrado.sort_values(ordenar_por, ascending=ascending)
    
    # Definir colunas
    colunas_base = ['Nome', 'Clube', 'Posi√ß√£o', 'Pontos M√©dia', 'Pre√ßo (C$)', 'Custo-Benef√≠cio', 'Partidas', 'Status', 'Tend√™ncia']
    
    if mostrar_scouts:
        scouts_cols = [col for col in df_ordenado.columns 
                      if col not in colunas_base + ['ID', 'Foto', 'Status_Mercado', 'Efici√™ncia', 'Valoriza√ß√£o (%)']]
        colunas_exibir = colunas_base + scouts_cols[:5]  # Limitar scouts para n√£o sobrecarregar
    else:
        colunas_exibir = colunas_base
    
    # Exibir tabela
    st.dataframe(
        df_ordenado[colunas_exibir],
        use_container_width=True,
        height=600
    )
    
    # Footer
    st.markdown("---")
    st.markdown(f"""
    <div style='text-align: center; padding: 1rem; background: white; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.05);'>
        <p style='margin: 0; color: #666;'><strong>Desenvolvido por Carlos Willian</strong> ‚Ä¢ Dashboard Cartola FC 2025 (Vers√£o Pro)</p>
        <p style='margin: 0.5rem 0 0 0; color: #999; font-size: 0.9rem;'>√öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')} ‚Ä¢ Dados da API oficial do Cartola FC</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()

