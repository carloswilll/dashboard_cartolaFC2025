import streamlit as st
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="Dashboard Cartola 2025", layout="wide")

# Carregar os dados
@st.cache_data
def carregar_dados():
    return pd.read_csv("scouts_jogadores.csv")

df = carregar_dados()

st.title("üèüÔ∏è Dashboard de Scouts - Cartola FC 2025")

# Filtros
col1, col2 = st.columns(2)
with col1:
    posicoes = df["Posi√ß√£o"].unique().tolist()
    posicao_selecionada = st.multiselect("Filtrar por Posi√ß√£o", posicoes, default=posicoes)

with col2:
    clubes = df["Clube"].unique().tolist()
    clube_selecionado = st.multiselect("Filtrar por Clube", clubes, default=clubes)

# Aplicar filtros
df_filtrado = df[
    (df["Posi√ß√£o"].isin(posicao_selecionada)) &
    (df["Clube"].isin(clube_selecionado))
].copy()

# Criar m√©trica de custo-benef√≠cio
df_filtrado["Custo-Benef√≠cio"] = df_filtrado["Pontos M√©dia"] / df_filtrado["Pre√ßo (C$)"].replace(0, 0.1)

# Rankings
st.subheader("üèÜ Top Jogadores")
col3, col4 = st.columns(2)

with col3:
    st.markdown("**Por Pontos M√©dia**")
    st.dataframe(df_filtrado.sort_values("Pontos M√©dia", ascending=False).head(10))

with col4:
    st.markdown("**Por Custo-Benef√≠cio**")
    st.dataframe(df_filtrado.sort_values("Custo-Benef√≠cio", ascending=False).head(10))

# Tabela completa com filtro de nome
st.subheader("üìÑ Tabela Completa dos Jogadores")

nome_jogador = st.text_input("üîç Buscar jogador pelo nome")

if nome_jogador:
    df_filtrado = df_filtrado[df_filtrado["Nome"].str.contains(nome_jogador, case=False, na=False)]

st.dataframe(df_filtrado.sort_values("Pontos M√©dia", ascending=False), use_container_width=True)

# M√©tricas adicionais
# 1. Rela√ß√£o entre Scouts e Pontos
scouts_colunas = [col for col in df.columns if col not in ["Nome", "Clube", "Posi√ß√£o", "Pre√ßo (C$)", "Pontos M√©dia"]]
scout_escolhido = st.selectbox("Escolha um Scout para an√°lise de correla√ß√£o com Pontos M√©dia:", scouts_colunas)

fig_cb = px.scatter(df_filtrado, x=scout_escolhido, y="Pontos M√©dia", color="Posi√ß√£o",
                    title=f"Rela√ß√£o entre {scout_escolhido} e Pontos M√©dia",
                    labels={scout_escolhido: scout_escolhido, "Pontos M√©dia": "Pontos"})
st.plotly_chart(fig_cb, use_container_width=True)

# 2. Ranking por Efici√™ncia em Scouts
st.markdown("### üß† Ranking por Efici√™ncia nos Scouts")
scout_eficiencia = scout_escolhido

if scout_eficiencia in df_filtrado.columns:
    df_filtrado[f"Efici√™ncia {scout_eficiencia}"] = df_filtrado["Pontos M√©dia"] / df_filtrado[scout_eficiencia].replace(0, 0.1)
    st.dataframe(df_filtrado.sort_values(f"Efici√™ncia {scout_eficiencia}", ascending=False)[["Nome", scout_eficiencia, "Pontos M√©dia", f"Efici√™ncia {scout_eficiencia}"]].head(10))

# 3. Proje√ß√£o de Valoriza√ß√£o
st.markdown("### üìâ Proje√ß√£o de Valoriza√ß√£o")
df_filtrado["Proje√ß√£o Valoriza√ß√£o"] = df_filtrado["Pontos M√©dia"] * df_filtrado["Custo-Benef√≠cio"]
st.dataframe(df_filtrado.sort_values("Proje√ß√£o Valoriza√ß√£o", ascending=False)[["Nome", "Pre√ßo (C$)", "Pontos M√©dia", "Custo-Benef√≠cio", "Proje√ß√£o Valoriza√ß√£o"]].head(10))

st.caption("Desenvolvido por Carlos Willian - Cartola FC 2025")



