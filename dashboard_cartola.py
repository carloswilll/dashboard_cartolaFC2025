import streamlit as st
import pandas as pd
from datetime import datetime
import requests
import plotly.express as px
from io import BytesIO

st.set_page_config(page_title="Dashboard Cartola 2025", layout="wide")

# üé® Estilo customizado para roxo nos multiselects e modo escuro/claro
st.markdown("""
    <style>
    .stMultiSelect [data-baseweb="select"] span {
        background-color: #7e57c2 !important;
        color: white !important;
    }
    </style>
""", unsafe_allow_html=True)

# SIDEBAR
st.sidebar.title("‚öôÔ∏è Filtros e Configura√ß√µes")

# Carregar dados da API
@st.cache_data(show_spinner="Carregando dados da API...")
def carregar_dados_api():
    url_scouts = 'https://api.cartola.globo.com/atletas/mercado'
    res_scouts = requests.get(url_scouts).json()

    jogadores = res_scouts['atletas']
    clubes = res_scouts['clubes']
    posicoes = res_scouts['posicoes']

    scouts_data = []
    for jogador in jogadores:
        clube = clubes[str(jogador['clube_id'])]['nome']
        posicao = posicoes[str(jogador['posicao_id'])]['nome']
        scouts = jogador.get('scout', {})

        dados_jogador = {
            'Nome': jogador['apelido'],
            'Clube': clube,
            'Posi√ß√£o': posicao,
            'Pre√ßo (C$)': jogador['preco_num'],
            'Pontos M√©dia': jogador['media_num'],
            'Partidas': jogador['jogos_num'],
        }
        dados_jogador.update(scouts)
        scouts_data.append(dados_jogador)

    df = pd.DataFrame(scouts_data)
    df.columns = df.columns.str.strip()
    return df.convert_dtypes().infer_objects()

# T√≠tulo principal
df = carregar_dados_api()
df["Pre√ßo (C$)"] = pd.to_numeric(df["Pre√ßo (C$)"], errors="coerce").fillna(0.0)
df["Pontos M√©dia"] = pd.to_numeric(df["Pontos M√©dia"], errors="coerce").fillna(0.0)
df["Custo-Benef√≠cio"] = df["Pontos M√©dia"] / df["Pre√ßo (C$)"].replace(0, 0.1)

# Filtros laterais din√¢micos
posicoes = df["Posi√ß√£o"].unique().tolist()
clubes = df["Clube"].unique().tolist()

posicao_selecionada = st.sidebar.multiselect("üß© Posi√ß√£o", posicoes, default=posicoes)
clube_selecionado = st.sidebar.multiselect("üè≥Ô∏è Clube", clubes, default=clubes)

preco_max = st.sidebar.slider("üí∞ Pre√ßo m√°ximo (C$)", float(df["Pre√ßo (C$)"].min()), float(df["Pre√ßo (C$)"].max()), float(df["Pre√ßo (C$)"].max()))
media_max = st.sidebar.slider("üìâ Pontos M√©dia m√°xima", float(df["Pontos M√©dia"].min()), float(df["Pontos M√©dia"].max()), float(df["Pontos M√©dia"].max()))

st.sidebar.markdown(f"üïí Dados atualizados em: `{datetime.now().strftime('%d/%m/%Y %H:%M:%S')}`")

# Aplicar filtros
df_filtrado = df[
    (df["Posi√ß√£o"].isin(posicao_selecionada)) &
    (df["Clube"].isin(clube_selecionado)) &
    (df["Pre√ßo (C$)"] <= preco_max) &
    (df["Pontos M√©dia"] <= media_max)
].copy()

df_filtrado["Custo-Benef√≠cio"] = df_filtrado["Pontos M√©dia"] / df_filtrado["Pre√ßo (C$)"].replace(0, 0.1)

# üèÜ T√≠tulo
st.title("‚öΩ Top Jogadores - Cartola FC 2025")
st.markdown("Visualize os melhores jogadores da rodada com base em pontua√ß√£o e custo-benef√≠cio.")

# üî¢ Pain√©is de Estat√≠sticas
col_a, col_b, col_c, col_d = st.columns(4)

col_a.metric("üìã Jogadores filtrados", len(df_filtrado))
col_b.metric("ü™ô Pre√ßo m√©dio (C$)", f"{df_filtrado['Pre√ßo (C$)'].mean():.2f}")
col_c.metric("üìä Pontua√ß√£o m√©dia", f"{df_filtrado['Pontos M√©dia'].mean():.2f}")
col_d.metric("üí∏ Custo-Benef√≠cio m√©dio", f"{df_filtrado['Custo-Benef√≠cio'].mean():.2f}")

# üîù Destaques
st.markdown("---")
st.subheader("üèÖ Destaques da Rodada")
col1, col2 = st.columns(2)

with col1:
    st.markdown("üîù **Top 10 por Pontos M√©dia**")
    st.dataframe(df_filtrado.sort_values("Pontos M√©dia", ascending=False).head(10), use_container_width=True, height=300)

with col2:
    st.markdown("üí∏ **Top 10 por Custo-Benef√≠cio**")
    st.dataframe(df_filtrado.sort_values("Custo-Benef√≠cio", ascending=False).head(10), use_container_width=True, height=300)

# üìä Gr√°fico de Dispers√£o
st.markdown("---")
st.subheader("üìä Rela√ß√£o entre Pre√ßo e Pontos")
fig = px.scatter(
    df_filtrado,
    x="Pre√ßo (C$)",
    y="Pontos M√©dia",
    color="Clube",
    hover_name="Nome",
    size_max=15,
    color_discrete_sequence=px.colors.qualitative.Safe,
    labels={"Pre√ßo (C$)": "Pre√ßo (C$)", "Pontos M√©dia": "Pontos M√©dia"},
)
fig.update_traces(marker=dict(size=10, opacity=0.75))
fig.update_layout(height=600, title_font_size=20)
st.plotly_chart(fig, use_container_width=True)

# üßç Buscar Jogador
st.markdown("---")
st.subheader("üìÑ Lista Completa")
nome_jogador = st.text_input("üîç Buscar por nome do jogador", placeholder="Ex: Pedro, Hulk, Gerson...")

if nome_jogador:
    df_filtrado = df_filtrado[df_filtrado["Nome"].str.contains(nome_jogador, case=False, na=False)]

st.dataframe(df_filtrado.sort_values("Pontos M√©dia", ascending=False), use_container_width=True, height=400)

st.caption("Desenvolvido por Carlos Willian - Cartola FC 2025")

